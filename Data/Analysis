
library(phyloseq)
library(brms)
library(BhGLM)

ff1 <- read.csv("ff1.csv")
ff2 <- ff1[,-1]
dim(ff2)


ff2[1:2,1003:1026]
set1 <- ff2[,c(1:1002,1010)]

  dist = c("bray", "jaccard", "jsd", "unifrac", "wunifrac", "dpcoa")
  m = dist[1]
  otu=otu_table(exp(set1[,1:1002]),taxa_are_rows = F)

dis.taxa = distance(otu, method=m, type="taxa") 
dis.taxa = as.matrix(dis.taxa); dim(dis.taxa)
  
  simi.mat <- function(dis.mat)
  {
    n <- ncol(dis.mat)
    D2 <- dis.mat^2
    I <- diag(1, n)
    II <- array(1, c(n,n))
    K <- -0.5 * (I - II/n) %*% D2 %*% (I - II/n)
    # to ensure a positive semi-definite matrix
    # method 1
    ev <- eigen(K)
    v <- ev$vectors
    e <- abs(ev$values)
     e=e+0.00000002
    K <- v %*% diag(e) %*% t(v)
    K
  }
  
  K.taxa = simi.mat(dis.taxa); dim(K.taxa)

taxa = as.numeric(K.taxa)
node1 = node2 = w = NULL
for (i in 1:(ncol(K.taxa)-1))
  for (j in (i+1):ncol(K.taxa))
  {
    if(abs(K.taxa[i,j]) > 0.18) #quantile(abs(taxa))[3])
    {
      node1 = c(node1,i);
      node2 = c(node2,j);
      w = c(w, K.taxa[i,j])
    }
  }
w = sqrt(abs(w)); length(w)

dis.sample = distance(otu, method=m, type="sample") 
dis.sample = as.matrix(dis.sample); dim(dis.sample)

K.sample = simi.mat(dis.sample); dim(K.sample)
  
sample = as.factor(1:nrow(set1))
A = K.sample
rownames(A) = sample
colnames(A) = sample
d1 = data.frame(set1, sample)
  

#####no structure no random effect
bp1 = set_prior("horseshoe(df=3, df_global=3)", class="b")
bp1= bp1 + set_prior("target += normal_lpdf(mean(b) | 0, 0.001)", check=F) # sensitive to the variance of mean(b)

###method 1
fm1 = bf(IBD ~ . - sample)  
f1= brm(fm1, data=d1, family=bernoulli, prior=bp1, control = list(adapt_delta = 0.99,max_treedepth= 18),
        chains=4, iter=4000)
aaaa <- ifelse(d1$IBD=="Yes",1,0)
ploo1 = loo_predict(f1)

measure.glm(aaaa, ploo1, family="binomial")

#####with structure no random effect

bp4 = set_prior("horseshoe(df=3, df_global=3)", class="b")
bp4= bp4 + set_prior("target += normal_lpdf(mean(b) | 0, 0.001)", check=F) # sensitive to the variance of mean(b)
bp4 = bp4 + set_prior("target += -0.5*dot_self(w .* (log(hs_local[node1])-log(hs_local[node2])))", check=F)

 ln = length(node1)
 stanvars =stanvar(x=ln, name="ln", scode="int ln;", block="data") +
  stanvar(x=node1, name="node1", scode="int node1[ln];", block="data") +
  stanvar(x=node2, name="node2", scode="int node2[ln];", block="data") +
  stanvar(x=w, name="w", scode="vector[ln] w;", block="data") 

###method 2

f4= brm(fm1, data=d1, family=bernoulli, prior=bp4, stanvars=stanvars, control = list(adapt_delta = 0.99,max_treedepth= 18),
        chains=4, iter=4000)

ploo4 = loo_predict(f4)
measure.glm(aaaa, ploo4, family="binomial")


#####with structure with random effect
fm2 = bf(IBD ~ . - sample + (1|gr(sample, cov=A))) 

f5 = brm(fm2, data=d1, data2=list(A=A), family=bernoulli, prior=bp4, stanvars=stanvars, control = list(adapt_delta = 0.999,max_treedepth= 20), chains=4, iter=4000)

ploo5 = loo_predict(f5)
measure.glm(aaaa, ploo5, family="binomial")
